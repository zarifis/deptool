#!/usr/bin/python
import json, sys, argparse, glob, os, re, shutil, operator
import pygraphviz as pgv
from pprint import pprint
import time
from datetime import date, timedelta
from images2gif import writeGif
from PIL import Image
import deptree

parser = argparse.ArgumentParser(description='Draw a page dependency tree. Deptrees can be either generated by deptool or rttool (they have the same format)')
parser.add_argument('target', help='Path to folder with trees')
parser.add_argument('-f', '--fullTree', action='store_true', default=False, help='Draw the full tree, including leaf nodes (default: False)')
parser.add_argument('-u', '--fullURIs', action='store_true', default=True, help='Draw full URIs (default: True)')
parser.add_argument('-s', '--shortURIs', action='store_true', default=False, help='Draw short URIs')
parser.add_argument('-e', '--veryshortURIs', action='store_true', help='Draw only URI ends')

parser.add_argument('--from', dest='fromDate', help='Start date/time [YYYYMMDD__HH]')
parser.add_argument('--to', dest='toDate', help='End date/time [YYYYMMDD__HH]')
parser.add_argument('--ua', dest='ua', default='chrome', help='User Agent (chrome|firefox|ie10|ie9|opera|safari-ipad|safari-mac)')
parser.add_argument('-o', '--outDir', dest='outdir', default='png/', help='Output directory (Default: png/)')
parser.add_argument('-g', '--gif', action='store_true', default=False, help='Create animated gif of generated pngs')
parser.add_argument('-m', '--merge', action='store_true', default=True, help='Create merged tree')
parser.set_defaults(veryshortURIs=False)

args = parser.parse_args()

outdir='png/'
if args.outdir:
  outdir=args.outdir+'/'

def drawTree(tree, filename):
  def nodeColor(url):
    if url.endswith(".js"):
      return 'green'
    elif url.endswith(".css"):
      return 'blue'
    return 'black'
    
  A = pgv.AGraph(directed=True, strict=True, label=filename)
  for k,v in tree.iteritems():
    cv=nodeColor(v)
    ck=nodeColor(k)
    if args.shortURIs:
      v = v[7:14]+'...'+v[-7:] 
      k = k[7:14]+'...'+k[-7:] 
    elif args.veryshortURIs:
      v = v[-7:]
      k = k[-7:]

    A.add_node(v, color=cv)
    A.add_node(k, color=ck)
    A.add_edge(v,k)

  A.layout('dot')
  if args.fullTree:
    A.layout('twopi')
  A.draw('png/'+filename+'.png')
  print "Wrote '"+filename+".png'"

def getFiles(fr, to, uas):
  if not fr:
    print "'--from' argument required"
    sys.exit(0)
  if not to:
    to = fr
  frdate = fr.split('_')[0]
  todate = to.split('_')[0]
  files = []
  if fr==to:
    for ua in uas:
      if '_' in fr:
        files.extend(glob.glob(args.target+'/'+fr+'_'+deptree.ua_dict[ua]))
      else:
        files.extend(sorted(glob.glob(args.target+'/'+frdate+'_*_'+deptree.ua_dict[ua])))
  else:
    while int(frdate)<=int(todate):
      for ua in uas:
        files.extend(sorted(glob.glob(args.target+'/'+frdate+'_*_'+deptree.ua_dict[ua])))
        t=time.strptime(frdate,'%Y%m%d')
        newdate=date(t.tm_year,t.tm_mon,t.tm_mday)+timedelta(1)
        frdate = newdate.strftime('%Y%m%d')
    
  return sorted(files)

def makegif():
  file_names = sorted(glob.glob(outdir+'/*'))
  images = [Image.open(fn) for fn in file_names]
  
  size = (150,150)
  for im in images:
    im.thumbnail(size, Image.ANTIALIAS)
  
  print writeGif.__doc__
  
  filename = outdir+"/animation.gif"
  writeGif(filename, images, duration=0.2)
  print "Wrote 'animation.gif'"

files = getFiles(args.fromDate, args.toDate, args.ua.split(','))

shutil.rmtree(outdir)
os.makedirs(outdir)

hashmap = {}
hashcounts = {}
mergedTree = {}

if not files:
  sys.exit("Did not find matching files.")

previous = {}
for f in files:
  if "merge" in f: continue
  # Load dependency trees
  depTree = json.load(open(f))  
  tree = deptree.getInverseTree(depTree) if args.fullTree else deptree.getInvCriticalTree(depTree)
  deptree.compareTrees(previous, tree)
  mergedTree = deptree.mergeTrees(mergedTree, tree)
  drawTree(tree, f.split('/')[-1])
  
  h = hash(json.dumps(tree, sort_keys=True))
  hashmap[h] = tree
  #pprint(tree)
  hashcounts[h] = hashcounts[h]+1 if h in hashcounts else 1
  previous = tree

drawTree(mergedTree, "merged")
#maxhash = max(hashcounts.iteritems(), key=operator.itemgetter(1))[0]
#dominantTree = hashmap[maxhash]
##pprint(hashmap.keys())
#pprint(hashcounts)
#pprint(dominantTree)
#pprint(mergedTree)

if args.gif:
  makegif()
